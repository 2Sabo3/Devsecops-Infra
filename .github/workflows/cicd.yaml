name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'
  pull_request:
    branches: [ "main" ]

jobs:

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' 

      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test || echo "No tests found, would add tests in a real project"
  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        
  build-docker-image:
    name: Docker Build
    runs-on: ubuntu-latest
    outputs:
        ecr-registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: |
        docker build . --file Dockerfile --tag starbucks:latest
        docker images
  
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: starbucks:latest
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Configure AWS Credntials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and tag images to Amazon ECR
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: starbucks
        IMAGE_TAG: ${{ github.sha }}

      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --file Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    
  
